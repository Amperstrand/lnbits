window.app.component("lnbits-fsat",{props:{amount:{type:Number,default:0}},template:"<span>{{ fsat }}</span>",computed:{fsat:function(){return LNbits.utils.formatSat(this.amount)}}}),window.app.component("lnbits-wallet-list",{data:function(){return{user:null,activeWallet:null,activeBalance:[],showForm:!1,walletName:"",LNBITS_DENOMINATION:LNBITS_DENOMINATION}},template:'\n    <q-list v-if="user && user.wallets.length" dense class="lnbits-drawer__q-list">\n      <q-item-label header v-text="$t(\'wallets\')"></q-item-label>\n      <q-item v-for="wallet in wallets" :key="wallet.id"\n        clickable\n        :active="activeWallet && activeWallet.id === wallet.id"\n        tag="a" :href="wallet.url">\n        <q-item-section side>\n          <q-avatar size="md"\n            :color="(activeWallet && activeWallet.id === wallet.id)\n              ? (($q.dark.isActive) ? \'primary\' : \'primary\')\n              : \'grey-5\'">\n            <q-icon name="flash_on" :size="($q.dark.isActive) ? \'21px\' : \'20px\'"\n              :color="($q.dark.isActive) ? \'blue-grey-10\' : \'grey-3\'"></q-icon>\n          </q-avatar>\n        </q-item-section>\n        <q-item-section>\n          <q-item-label lines="1">{{ wallet.name }}</q-item-label>\n          <q-item-label v-if="LNBITS_DENOMINATION != \'sats\'" caption>{{ parseFloat(String(wallet.live_fsat).replaceAll(",", "")) / 100  }} {{ LNBITS_DENOMINATION }}</q-item-label>\n          <q-item-label v-else caption>{{ wallet.live_fsat }} {{ LNBITS_DENOMINATION }}</q-item-label>\n        </q-item-section>\n        <q-item-section side v-show="activeWallet && activeWallet.id === wallet.id">\n          <q-icon name="chevron_right" color="grey-5" size="md"></q-icon>\n        </q-item-section>\n      </q-item>\n      <q-item clickable @click="showForm = !showForm">\n        <q-item-section side>\n          <q-icon :name="(showForm) ? \'remove\' : \'add\'" color="grey-5" size="md"></q-icon>\n        </q-item-section>\n        <q-item-section>\n          <q-item-label lines="1" class="text-caption" v-text="$t(\'add_wallet\')"></q-item-label>\n        </q-item-section>\n      </q-item>\n      <q-item v-if="showForm">\n        <q-item-section>\n          <q-form @submit="createWallet">\n            <q-input filled dense v-model="walletName" label="Name wallet *">\n              <template v-slot:append>\n                <q-btn round dense flat icon="send" size="sm" @click="createWallet" :disable="walletName === \'\'"></q-btn>\n              </template>\n            </q-input>\n          </q-form>\n        </q-item-section>\n      </q-item>\n    </q-list>\n  ',computed:{wallets:function(){var e=this.activeBalance;return this.user.wallets.map((function(t){return t.live_fsat=e.length&&e[0]===t.id?LNbits.utils.formatSat(e[1]):t.fsat,t}))}},methods:{createWallet:function(){LNbits.api.createWallet(this.user.wallets[0],this.walletName)},updateWalletBalance:function(e){this.activeBalance=e.detail}},created:function(){window.user&&(this.user=LNbits.map.user(window.user)),window.wallet&&(this.activeWallet=LNbits.map.wallet(window.wallet)),document.addEventListener("updateWalletBalance",this.updateWalletBalance)}}),window.app.component("lnbits-extension-list",{data:function(){return{extensions:[],user:null}},template:'\n    <q-list v-if="user" dense class="lnbits-drawer__q-list">\n      <q-item-label header v-text="$t(\'extensions\')"></q-item-label>\n      <q-item v-for="extension in userExtensions" :key="extension.code"\n        clickable\n        :active="extension.isActive"\n        tag="a" :href="[extension.url, \'?usr=\', user.id].join(\'\')">\n        <q-item-section side>\n          <q-avatar size="md">\n            <q-img\n              :src="extension.tile"\n              style="max-width:20px"\n            ></q-img>\n          </q-avatar>\n        </q-item-section>\n        <q-item-section>\n          <q-item-label lines="1">{{ extension.name }} </q-item-label>\n        </q-item-section>\n        <q-item-section side v-show="extension.isActive">\n          <q-icon name="chevron_right" color="grey-5" size="md"></q-icon>\n        </q-item-section>\n      </q-item>\n      <q-item clickable tag="a" :href="[\'/extensions?usr=\', user.id].join(\'\')">\n        <q-item-section side>\n          <q-icon name="clear_all" color="grey-5" size="md"></q-icon>\n        </q-item-section>\n        <q-item-section>\n          <q-item-label lines="1" class="text-caption" v-text="$t(\'extensions\')"></q-item-label>\n        </q-item-section>\n      </q-item>\n      <div class="lt-md q-mt-xl q-mb-xl"></div>\n    </q-list>\n  ',computed:{userExtensions:function(){if(!this.user)return[];var e=window.location.pathname,t=this.user.extensions;return this.extensions.filter((function(e){return-1!==t.indexOf(e.code)})).map((function(t){return t.isActive=e.startsWith(t.url),t}))}},created:function(){window.extensions&&(this.extensions=window.extensions.map((function(e){return LNbits.map.extension(e)})).sort((function(e,t){return e.name.localeCompare(t.name)}))),window.user&&(this.user=LNbits.map.user(window.user))}}),window.app.component("lnbits-admin-ui",{props:["showNode"],data:function(){return{extensions:[],user:null}},template:'\n    <q-list v-if="user && user.admin" dense class="lnbits-drawer__q-list">\n      <q-item-label header>Admin</q-item-label>\n      <q-item clickable tag="a" :href="[\'/admin?usr=\', user.id].join(\'\')">\n        <q-item-section side>\n          <q-icon name="admin_panel_settings" color="grey-5" size="md"></q-icon>\n        </q-item-section>\n        <q-item-section>\n          <q-item-label lines="1" class="text-caption" v-text="$t(\'manage_server\')"></q-item-label>\n        </q-item-section>\n      </q-item>\n      <q-item v-if=\'showNode\' clickable tag="a" :href="[\'/node?usr=\', user.id].join(\'\')">\n        <q-item-section side>\n          <q-icon name="developer_board" color="grey-5" size="md"></q-icon>\n        </q-item-section>\n        <q-item-section>\n          <q-item-label lines="1" class="text-caption" v-text="$t(\'manage_node\')"></q-item-label>\n        </q-item-section>\n      </q-item>\n    </q-list>\n  ',created:function(){window.user&&(this.user=LNbits.map.user(window.user))}}),window.app.component("lnbits-payment-details",{props:["payment"],mixins:[windowMixin],data:function(){return{LNBITS_DENOMINATION:LNBITS_DENOMINATION}},template:'\n  <div class="q-py-md" style="text-align: left">\n\n  <div v-if="payment.tag" class="row justify-center q-mb-md">\n    <q-badge v-if="hasTag" color="yellow" text-color="black">\n      #{{ payment.tag }}\n    </q-badge>\n  </div>\n\n  <div class="row">\n    <b v-text="$t(\'created\')"></b>:\n    {{ payment.date }} ({{ payment.dateFrom }})\n  </div>\n\n  <div class="row">\n   <b v-text="$t(\'expiry\')"></b>:\n   {{ payment.expirydate }} ({{ payment.expirydateFrom }})\n  </div>\n\n  <div class="row">\n   <b v-text="$t(\'amount\')"></b>:\n    {{ (payment.amount / 1000).toFixed(3) }} {{LNBITS_DENOMINATION}}\n  </div>\n\n  <div class="row">\n    <b v-text="$t(\'fee\')"></b>:\n    {{ (payment.fee / 1000).toFixed(3) }} {{LNBITS_DENOMINATION}}\n  </div>\n\n  <div class="text-wrap">\n    <b style="white-space: nowrap;" v-text="$t(\'payment_hash\')"></b>:&nbsp;{{ payment.payment_hash }}\n        <q-icon name="content_copy" @click="copyText(payment.payment_hash)" size="1em" color="grey" class="q-mb-xs cursor-pointer" />\n  </div>\n\n  <div class="text-wrap">\n    <b style="white-space: nowrap;" v-text="$t(\'memo\')"></b>:&nbsp;{{ payment.memo }}\n  </div>\n\n  <div class="text-wrap" v-if="payment.webhook">\n    <b style="white-space: nowrap;" v-text="$t(\'webhook\')"></b>:&nbsp;{{ payment.webhook }}:&nbsp;<q-badge :color="webhookStatusColor" text-color="white">\n      {{ webhookStatusText }}\n    </q-badge>\n  </div>\n\n  <div class="text-wrap" v-if="hasPreimage">\n    <b style="white-space: nowrap;" v-text="$t(\'payment_proof\')"></b>:&nbsp;{{ payment.preimage }}\n  </div>\n\n  <div class="row" v-for="entry in extras">\n    <q-badge v-if="hasTag" color="secondary" text-color="white">\n      extra\n    </q-badge>\n    <b>{{ entry.key }}</b>:\n    {{ entry.value }}\n  </div>\n\n  <div class="row" v-if="hasSuccessAction">\n    <b>Success action</b>:\n      <lnbits-lnurlpay-success-action\n        :payment="payment"\n        :success_action="payment.extra.success_action"\n      ></lnbits-lnurlpay-success-action>\n  </div>\n\n</div>\n  ',computed:{hasPreimage(){return this.payment.preimage&&"0000000000000000000000000000000000000000000000000000000000000000"!==this.payment.preimage},hasSuccessAction(){return this.hasPreimage&&this.payment.extra&&this.payment.extra.success_action},webhookStatusColor(){return this.payment.webhook_status>=300||this.payment.webhook_status<0?"red-10":this.payment.webhook_status?"green-10":"cyan-7"},webhookStatusText(){return this.payment.webhook_status?this.payment.webhook_status:"not sent yet"},hasTag(){return this.payment.extra&&!!this.payment.extra.tag},extras(){if(!this.payment.extra)return[];let e=_.omit(this.payment.extra,["tag","success_action"]);return Object.keys(e).map((t=>({key:t,value:e[t]})))}}}),window.app.component("lnbits-lnurlpay-success-action",{props:["payment","success_action"],data(){return{decryptedValue:this.success_action.ciphertext}},template:'\n    <div>\n      <p class="q-mb-sm">{{ success_action.message || success_action.description }}</p>\n      <code v-if="decryptedValue" class="text-h6 q-mt-sm q-mb-none">\n        {{ decryptedValue }}\n      </code>\n      <p v-else-if="success_action.url" class="text-h6 q-mt-sm q-mb-none">\n        <a target="_blank" style="color: inherit;" :href="success_action.url">{{ success_action.url }}</a>\n      </p>\n    </div>\n  ',mounted:function(){if("aes"!==this.success_action.tag)return null;decryptLnurlPayAES(this.success_action,this.payment.preimage).then((e=>{this.decryptedValue=e}))}}),window.app.component("lnbits-qrcode",{mixins:[windowMixin],props:["value"],data:()=>({logo:LNBITS_QR_LOGO}),template:'\n  <div class="qrcode__wrapper">\n    <img class="qrcode__image" :src="logo" alt="..." />\n  </div>\n  '}),window.app.component("lnbits-notifications-btn",{mixins:[windowMixin],props:["pubkey"],data:()=>({isSupported:!1,isSubscribed:!1,isPermissionGranted:!1,isPermissionDenied:!1}),template:'\n    <q-btn\n      v-if="g.user.wallets"\n      :disabled="!this.isSupported"\n      dense\n      flat\n      round\n      @click="toggleNotifications()"\n      :icon="this.isSubscribed ? \'notifications_active\' : \'notifications_off\'"\n      size="sm"\n      type="a"\n    >\n      <q-tooltip v-if="this.isSupported && !this.isSubscribed">Subscribe to notifications</q-tooltip>\n      <q-tooltip v-if="this.isSupported && this.isSubscribed">Unsubscribe from notifications</q-tooltip>\n      <q-tooltip v-if="this.isSupported && this.isPermissionDenied">\n          Notifications are disabled,<br/>please enable or reset permissions\n      </q-tooltip>\n      <q-tooltip v-if="!this.isSupported">Notifications are not supported</q-tooltip>\n    </q-btn>\n  ',methods:{urlB64ToUint8Array(e){const t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=atob(t),i=new Uint8Array(n.length);for(let e=0;e<n.length;++e)i[e]=n.charCodeAt(e);return i},toggleNotifications(){this.isSubscribed?this.unsubscribe():this.subscribe()},saveUserSubscribed(e){let t=JSON.parse(this.$q.localStorage.getItem("lnbits.webpush.subscribedUsers"))||[];t.includes(e)||t.push(e),this.$q.localStorage.set("lnbits.webpush.subscribedUsers",JSON.stringify(t))},removeUserSubscribed(e){let t=JSON.parse(this.$q.localStorage.getItem("lnbits.webpush.subscribedUsers"))||[];t=t.filter((t=>t!==e)),this.$q.localStorage.set("lnbits.webpush.subscribedUsers",JSON.stringify(t))},isUserSubscribed(e){return(JSON.parse(this.$q.localStorage.getItem("lnbits.webpush.subscribedUsers"))||[]).includes(e)},subscribe(){var e=this;this.isSupported&&!this.isPermissionDenied&&(Notification.requestPermission().then((e=>{this.isPermissionGranted="granted"===e,this.isPermissionDenied="denied"===e})).catch((function(e){console.log(e)})),navigator.serviceWorker.ready.then((t=>{navigator.serviceWorker.getRegistration().then((t=>{t.pushManager.getSubscription().then((function(n){if(null===n||!e.isUserSubscribed(e.g.user.id)){const n={applicationServerKey:e.urlB64ToUint8Array(e.pubkey),userVisibleOnly:!0};t.pushManager.subscribe(n).then((function(t){LNbits.api.request("POST","/api/v1/webpush",e.g.user.wallets[0].adminkey,{subscription:JSON.stringify(t)}).then((function(t){e.saveUserSubscribed(t.data.user),e.isSubscribed=!0})).catch((function(e){LNbits.utils.notifyApiError(e)}))}))}})).catch((function(e){console.log(e)}))}))})))},unsubscribe(){var e=this;navigator.serviceWorker.ready.then((t=>{t.pushManager.getSubscription().then((t=>{t&&LNbits.api.request("DELETE","/api/v1/webpush?endpoint="+btoa(t.endpoint),e.g.user.wallets[0].adminkey).then((function(){e.removeUserSubscribed(e.g.user.id),e.isSubscribed=!1})).catch((function(e){LNbits.utils.notifyApiError(e)}))}))})).catch((function(e){console.log(e)}))},checkSupported:function(){let e="https:"===window.location.protocol,t="serviceWorker"in navigator,n="Notification"in window,i="PushManager"in window;return this.isSupported=e&&t&&n&&i,this.isSupported||console.log("Notifications disabled because requirements are not met:",{HTTPS:e,"Service Worker API":t,"Notification API":n,"Push API":i}),this.isSupported},updateSubscriptionStatus:async function(){var e=this;await navigator.serviceWorker.ready.then((t=>{t.pushManager.getSubscription().then((t=>{e.isSubscribed=!!t&&e.isUserSubscribed(e.g.user.id)}))})).catch((function(e){console.log(e)}))}},created:function(){this.isPermissionDenied="denied"===Notification.permission,this.checkSupported()&&this.updateSubscriptionStatus()}}),window.app.component("lnbits-dynamic-fields",{mixins:[windowMixin],props:["options","value"],data:()=>({formData:null}),template:'\n    <div v-if="formData">\n      <div class="row q-mb-lg" v-for="o in options">\n        <div class="col auto-width">\n          <p v-if=o.options?.length class="q-ml-xl">\n            <span v-text="o.name"></span> <small v-if="o.description"> (<span v-text="o.description"></span>)</small>\n          </p>\n          <lnbits-dynamic-fields v-if="o.options?.length" :options="o.options" v-model="formData[o.name]"\n            @input="handleValueChanged" class="q-ml-xl">\n          </lnbits-dynamic-fields>\n          <div v-else>\n            <q-input v-if="o.type === \'number\'" v-model="formData[o.name]" @input="handleValueChanged" type="number"\n              :label="o.name" :hint="o.description" filled dense>\n            </q-input>\n            <q-input v-else-if="o.type === \'text\'" v-model="formData[o.name]" @input="handleValueChanged" type="textarea"\n              rows="5" :label="o.name" :hint="o.description" filled dense>\n            </q-input>\n            <div v-else-if="o.type === \'bool\'">\n              <q-item tag="label" v-ripple>\n                <q-item-section avatar top>\n                  <q-checkbox v-model="formData[o.name]" @input="handleValueChanged" />\n                </q-item-section>\n                <q-item-section>\n                  <q-item-label><span v-text="o.name"></span></q-item-label>\n                  <q-item-label caption> <span v-text="o.description"></span> </q-item-label>\n                </q-item-section>\n              </q-item>\n            </div>\n            <q-select v-else-if="o.type === \'select\'" v-model="formData[o.name]" @input="handleValueChanged" :label="o.name"\n              :hint="o.description" :options="o.values"></q-select>\n\n            <q-select v-else-if="o.isList" filled multiple dense v-model.trim="formData[o.name]" use-input use-chips\n              @input="handleValueChanged" multiple hide-dropdown-icon input-debounce="0" new-value-mode="add-unique"\n              :label="o.name" :hint="o.description">\n            </q-select>\n            <q-input v-else v-model="formData[o.name]" @input="handleValueChanged" :label="o.name" :hint="o.description"\n              filled dense>\n            </q-input>\n\n          </div>\n        </div>\n      </div>\n    </div>\n  ',methods:{buildData(e,t={}){return e.reduce(((e,n)=>(n.options?.length?e[n.name]=this.buildData(n.options,t[n.name]):e[n.name]=t[n.name]??n.default,e)),{})},handleValueChanged(){this.$emit("input",this.formData)}},created:function(){this.formData=this.buildData(this.options,this.value)}}),window.app.use(Quasar),window.app.use(window.i18n),window.app.mount("#vue"),Vue.component("lnbits-funding-sources",{mixins:[windowMixin],props:["form-data","allowed-funding-sources"],computed:{fundingSources(){let e=[];for(const[t,n,i]of this.rawFundingSources){const n={};if(null!==i)for(let[e,t]of Object.entries(i))n[e]={label:t,value:null};e.push([t,n])}return new Map(e)}},data:()=>({rawFundingSources:[["VoidWallet","Void Wallet",null],["FakeWallet","Fake Wallet",{fake_wallet_secret:"Secret"}],["CoreLightningWallet","Core Lightning",{corelightning_rpc:"Endpoint"}],["CoreLightningRestWallet","Core Lightning Rest",{corelightning_rest_url:"Endpoint",corelightning_rest_cert:"Certificate",corelightning_rest_macaroon:"Macaroon"}],["LndRestWallet","Lightning Network Daemon (LND Rest)",{lnd_rest_endpoint:"Endpoint",lnd_rest_cert:"Certificate",lnd_rest_macaroon:"Macaroon",lnd_rest_macaroon_encrypted:"Encrypted Macaroon"}],["LndWallet","Lightning Network Daemon (LND)",{lnd_grpc_endpoint:"Endpoint",lnd_grpc_cert:"Certificate",lnd_grpc_port:"Port",lnd_grpc_admin_macaroon:"Admin Macaroon",lnd_grpc_macaroon_encrypted:"Encrypted Macaroon"}],["LnTipsWallet","LN.Tips",{lntips_api_endpoint:"Endpoint",lntips_api_key:"API Key"}],["LNPayWallet","LN Pay",{lnpay_api_endpoint:"Endpoint",lnpay_api_key:"API Key",lnpay_wallet_key:"Wallet Key"}],["EclairWallet","Eclair (ACINQ)",{eclair_url:"URL",eclair_pass:"Password"}],["LNbitsWallet","LNBits",{lnbits_endpoint:"Endpoint",lnbits_key:"Admin Key"}],["OpenNodeWallet","OpenNode",{opennode_api_endpoint:"Endpoint",opennode_key:"Key"}],["ClicheWallet","Cliche (NBD)",{cliche_endpoint:"Endpoint"}],["SparkWallet","Spark",{spark_url:"Endpoint",spark_token:"Token"}]]}),template:'\n    <div class="funding-sources">\n        <h6 class="q-mt-xl q-mb-md">Funding Sources</h6>\n        <div class="row">\n          <div class="col-12">\n            <p>Active Funding<small> (Requires server restart)</small></p>\n            <q-select\n              filled\n              v-model="formData.lnbits_backend_wallet_class"\n              hint="Select the active funding wallet"\n              :options="allowedFundingSources"\n            ></q-select>\n          </div>\n        </div>\n        <q-list\n          class="q-mt-md"\n          v-for="(fund, idx) in allowedFundingSources"\n          :key="idx"\n        >\n          <div v-if="fundingSources.get(fund) && fund === formData.lnbits_backend_wallet_class">\n            <div class="row"\n              v-for="([key, prop], i) in Object.entries(fundingSources.get(fund))"\n              :key="i"\n            >\n              <div class="col-12">\n                <q-input\n                  filled\n                  type="text"\n                  class="q-mt-sm"\n                  v-model="formData[key]"\n                  :label="prop.label"\n                  :hint="prop.hint"\n                ></q-input>\n              </div>\n            </div>\n          </div>\n        </q-list>\n    </div>\n  '}),Vue.component("lnbits-extension-settings-form",{name:"lnbits-extension-settings-form",props:["options","adminkey","endpoint"],methods:{updateSettings:async function(){if(!this.settings)return Quasar.plugins.Notify.create({message:"No settings to update",type:"negative"});try{const{data:e}=await LNbits.api.request("PUT",this.endpoint,this.adminkey,this.settings);this.settings=e}catch(e){LNbits.utils.notifyApiError(e)}},getSettings:async function(){try{const{data:e}=await LNbits.api.request("GET",this.endpoint,this.adminkey);this.settings=e}catch(e){LNbits.utils.notifyApiError(e)}},resetSettings:async function(){LNbits.utils.confirmDialog("Are you sure you want to reset the settings?").onOk((async()=>{try{await LNbits.api.request("DELETE",this.endpoint,this.adminkey),await this.getSettings()}catch(e){LNbits.utils.notifyApiError(e)}}))}},created:async function(){await this.getSettings()},template:'\n    <q-form v-if="settings" @submit="updateSettings" class="q-gutter-md">\n      <lnbits-dynamic-fields :options="options" v-model="settings"></lnbits-dynamic-fields>\n      <div class="row q-mt-lg">\n        <q-btn v-close-popup unelevated color="primary" type="submit">Update</q-btn>\n        <q-btn v-close-popup unelevated color="danger" @click="resetSettings" >Reset</q-btn>\n        <slot name="actions"></slot>\n      </div>\n    </q-form>\n  ',data:function(){return{settings:void 0}}}),Vue.component("lnbits-extension-settings-btn-dialog",{name:"lnbits-extension-settings-btn-dialog",props:["options","adminkey","endpoint"],template:'\n    <q-btn v-if="options" unelevated @click="show = true" color="primary" icon="settings" class="float-right">\n        <q-dialog v-model="show" position="top">\n          <q-card class="q-pa-lg q-pt-xl lnbits__dialog-card">\n            <lnbits-extension-settings-form :options="options" :adminkey="adminkey" :endpoint="endpoint">\n                <template v-slot:actions>\n                    <q-btn v-close-popup flat color="grey" class="q-ml-auto">Close</q-btn>\n                </template>\n            </lnbits-extension-settings-form>\n          </q-card>\n        </q-dialog>\n    </q-btn>\n  ',data:function(){return{show:!1}}});
